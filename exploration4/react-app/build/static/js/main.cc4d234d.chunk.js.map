{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","Counter","styles","fontSize","fontWeight","_this2","this","console","log","props","react_default","a","createElement","style","className","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDecrement","onDelete","id","classes","value","Counters","state","counters","handleIncrement","Object","toConsumableArray","_this","index","indexOf","objectSpread","setState","handleDecrement","handleReset","map","c","handleDelete","counterId","filter","components_counter","key","ReactDOM","render","components_counters","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6PCItBC,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mFCiDSC,6MAvDXC,OAAS,CACLC,SAAS,GACTC,WAAY,gFAqBR,IAAAC,EAAAC,KAIJ,OAHAC,QAAQC,IAAIF,KAAKG,OAIVC,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,QAAMC,MAASP,KAAKJ,OAAQY,UAAWR,KAAKS,mBAAoBT,KAAKU,eACrEN,EAAAC,EAAAC,cAAA,UACIK,QAAW,kBAAIZ,EAAKI,MAAMS,YAAYb,EAAKI,MAAMU,UAAUL,UAAU,4BADzE,aAGCJ,EAAAC,EAAAC,cAAA,UACGK,QAAW,kBAAIZ,EAAKI,MAAMW,YAAYf,EAAKI,MAAMU,UAAUL,UAAU,0BADxE,aAGAJ,EAAAC,EAAAC,cAAA,UAAQK,QAAW,kBAAIZ,EAAKI,MAAMY,SAAShB,EAAKI,MAAMU,QAAQG,KAAKR,UAAU,6BAA7E,qDAQZ,IAAIS,EAAU,mBAEd,OADAA,GAAwC,IAA7BjB,KAAKG,MAAMU,QAAQK,MAAc,UAAU,gDAI7C,IACHA,EAASlB,KAAKG,MAAMU,QAApBK,MACN,OAAiB,IAAVA,EAAc,OAASA,SA/DZ7B,aCoDP8B,6MAlDXC,MAAQ,CACJC,SAAS,CACL,CAACL,GAAG,EAAEE,MAAM,GACZ,CAACF,GAAG,EAAEE,MAAM,GACZ,CAACF,GAAG,EAAEE,MAAM,GACZ,CAACF,GAAG,EAAEE,MAAM,OAIxBI,gBAAkB,SAAAT,GAET,IAAMQ,EAAQE,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMC,UAC/BK,EAAQL,EAASM,QAAQd,GAC/BQ,EAASK,GAATH,OAAAK,EAAA,EAAAL,CAAA,GAAsBV,GACtBQ,EAASK,GAAOR,QAChBO,EAAKI,SAAS,CAACR,gBAEnBS,gBAAkB,SAAAjB,GAET,IAAMQ,EAAQE,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMC,UAC/BK,EAAQL,EAASM,QAAQd,GAC/BQ,EAASK,GAATH,OAAAK,EAAA,EAAAL,CAAA,GAAsBV,GACtBQ,EAASK,GAAOR,QAChBO,EAAKI,SAAS,CAACR,gBAElBU,YAAc,WAEL,IAAMV,EAAWI,EAAKL,MAAMC,SAASW,IAAI,SAAAC,GAAgB,OAAZA,EAAEf,MAAQ,EAASe,IAChER,EAAKI,SAAS,CAACR,gBAEzBa,aAAe,SAAAC,GACXlC,QAAQC,IAAI,uBAAuBiC,GACnC,IAAMd,EAAWI,EAAKL,MAAMC,SAASe,OAAO,SAAAH,GAAC,OAAEA,EAAEjB,KAAKmB,IACtDV,EAAKI,SAAS,CAACR,sFAEP,IAAAtB,EAAAC,KACJ,OACAI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQK,QAAWX,KAAK+B,YAAavB,UAAU,8BAA/C,QAGIR,KAAKoB,MAAMC,SAASW,IAAI,SAAAnB,GAAO,OAAGT,EAAAC,EAAAC,cAAC+B,EAAD,CAASC,IAAOzB,EAAQG,GAAID,SAAYhB,EAAKmC,aAActB,YAAeb,EAAKuB,gBAAiBR,YAAef,EAAK+B,gBAAiBjB,QAAWA,cA1C3KxB,aCMvBkD,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAcC,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc4d234d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nclass Counter extends Component{\r\n//    state = {\r\n//        value:this.props.counter.value,\r\n//        tags:['tag1','tag2','tag3']\r\n//        //imageUrl:'https://picsum.photos/200'\r\n//        \r\n//    };\r\n//    constructor(){\r\n//        super();\r\n//        this.handleIncrement = this.handleIncrement.bind(this);\r\n//    }\r\n    styles = {\r\n        fontSize:15,\r\n        fontWeight: \"bold\"\r\n        //imageUrl:'https://picsum.photos/200'\r\n        \r\n    };\r\n//      handleIncrement = () => {\r\n//          \r\n//          this.setState({value:this.state.value+1});\r\n//      }\r\n      \r\n//      handleReset = () => {\r\n//          \r\n//          const counters = this.state.counters.map(c=>{c.value = 0;return c;});\r\n//          this.setState({});\r\n//      }\r\n//      \r\n      \r\n\r\n//    handleIncrement(){\r\n//        console.log(\"click\",this);\r\n//        \r\n//    }\r\n    render(){\r\n        console.log(this.props);\r\n        \r\n        \r\n        return(\r\n               <div>\r\n               \r\n               <span style = {this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n               <button \r\n                   onClick = {()=>this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\">Increment\r\n               </button>\r\n                <button \r\n                   onClick = {()=>this.props.onDecrement(this.props.counter)} className=\"btn btn-primary btn-sm\">Decrement\r\n               </button>\r\n                <button onClick = {()=>this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete\r\n                </button>\r\n               \r\n               </div>\r\n        );\r\n    }\r\n\r\ngetBadgeClasses(){\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\":\"primary\";\r\n    return classes;\r\n}\r\n    \r\nformatCount(){\r\n    const{value} = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n}\r\n}\r\nexport default Counter;","import React, {Component} from 'react';\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n    state = {\r\n        counters:[\r\n            {id:1,value:4},\r\n            {id:2,value:3},\r\n            {id:3,value:8},\r\n            {id:4,value:0}\r\n            \r\n        ]\r\n    };\r\nhandleIncrement = counter => {\r\n          \r\n         const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = {...counter};\r\n    counters[index].value++;\r\n    this.setState({counters});\r\n      }\r\nhandleDecrement = counter => {\r\n          \r\n         const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = {...counter};\r\n    counters[index].value--;\r\n    this.setState({counters});\r\n      }\r\n handleReset = () => {\r\n          \r\n          const counters = this.state.counters.map(c=>{c.value = 0;return c;});\r\n          this.setState({counters});\r\n      }\r\nhandleDelete = counterId => {\r\n    console.log(\"Event Handler Called\",counterId);\r\n    const counters = this.state.counters.filter(c=>c.id!==counterId);\r\n    this.setState({counters});\r\n};\r\n    render(){\r\n        return(\r\n        <div>\r\n            <button onClick = {this.handleReset} className=\"btn btn-primary btn-sm m-2\">Undo\r\n            </button>\r\n            {\r\n                this.state.counters.map(counter=>(<Counter key = {counter.id} onDelete = {this.handleDelete} onIncrement = {this.handleIncrement} onDecrement = {this.handleDecrement} counter = {counter} >\r\n                </Counter>\r\n        ))}\r\n        </div>\r\n        \r\n        );\r\n    }\r\n\r\n}\r\nexport default Counters;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render(<Counters />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}